apply plugin: "com.android.application"

import com.android.build.OutputFile



project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

def enableSeparateBuildPerCPUArchitecture = false

def enableProguardInReleaseBuilds = true

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

	signingConfigs {
		release {
			if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
				storeFile file(MYAPP_RELEASE_STORE_FILE)
				storePassword MYAPP_RELEASE_STORE_PASSWORD
				keyAlias MYAPP_RELEASE_KEY_ALIAS
				keyPassword MYAPP_RELEASE_KEY_PASSWORD
			}
		}
	}
    defaultConfig {
        applicationId "com.ehdaapp"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        buildTypes.each {
            it.buildConfigField 'String', 'fragmentationDefault', fragmentationDefault
            it.buildConfigField 'String', 'applicationEncoding', applicationEncoding
            it.buildConfigField 'String', 'stackSizeUtil', stackSizeUtil
            it.buildConfigField 'String', 'secureDataOnDisk', secureDataOnDisk
            it.buildConfigField 'String', 'dataIsAvailable', dataIsAvailable
            it.buildConfigField 'String', 'googlePlayApi', googlePlayApi
        }
        release {
            debuggable false
            useProguard enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile project(':react-native-vector-icons')
    compile project(':react-native-share')
    // google maps
    compile(project(':react-native-maps')){
        exclude group: 'com.google.android.gms', module: 'play-services-base'
        exclude group: 'com.google.android.gms', module: 'play-services-maps'
    }
    compile 'com.google.android.gms:play-services-base:10.0.1'
    compile 'com.google.android.gms:play-services-maps:10.0.1'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
